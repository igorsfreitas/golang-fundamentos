package main

import (
	"fmt"
	"reflect"
)

func main() {
	// O ARRAY É UMA LISTA COM TAMANHO FIXO E O SLICE É UMA LISTA COM TAMANHO DINAMICO
	// OS ARRAYS NO GO SÃO BEM INFLEXIVEIS AO CONTRÁRIO DOS SLICES. NOS ARRAYS VC NECESSARIAMENTE PRECISA PASSAR O TAMANHO DO ARRAY E
	// NÃO PODE ALTERAR O TAMANHO DELE DURANTE A EXECUÇÃO DO PROGRAMA
	var arr1 [5]int
	arr1[0] = 100
	fmt.Println(arr1)

	arr2 := [5]int{1, 2, 3, 4, 5}
	fmt.Println(arr2)

	arr3 := [...]int{1, 2, 3, 4} // NÃO DEIXA O ARRAY COM TAMANHO DINAMICO, MAS DEIXA O GO CALCULAR O TAMANHO DO ARRAY
	// BASEADO NA QUANTIDADE DE ELEMENTOS
	fmt.Println(arr3)

	// NORMALMENTE EM GO UTILIZAMOS MUITO POUCO OS ARRAYS E UTILIZAMOS MAIS OS SLICES
	// SLICES SÃO CRIADAS COM BASE NO ARRAY, SÓ QUE MAIS FLEXIVEIS

	slice := []int{1, 2, 3, 4} // UM SLICE SÓ PODE TER UM TIPO DE DADO, MAS PODE TER VÁRIOS VALORES, SENDO MAIS FLEXÍVEL QUE O ARRAY
	fmt.Println(slice)

	// O SLICE É UMA FATIA DE UM ARRAY, ELE NÃO TEM UM TAMANHO FIXO, ELE PODE CRESCER OU DIMINUIR

	fmt.Println(reflect.TypeOf(slice))
	fmt.Println(reflect.TypeOf(arr3))

	slice = append(slice, 18) // O APPEND CRIA UM NOVO SLICE COM O VALOR ADICIONADO, E NÃO ALTERA O SLICE ORIGINAL
	fmt.Println(slice)

	slice2 := arr2[1:3]
	fmt.Println(slice2)

	//ARRAYS INTERNOS

	slice3 := make([]float32, 10, 11) // O MAKE CRIA UM SLICE COM BASE NO TIPO DE DADO, NO TAMANHO E NA CAPACIDADE
	fmt.Println(slice3)
	fmt.Println(len(slice3)) // LEN RETORNA O TAMANHO DO SLICE
	fmt.Println(cap(slice3)) // CAP RETORNA A CAPACIDADE DO SLICE
}
